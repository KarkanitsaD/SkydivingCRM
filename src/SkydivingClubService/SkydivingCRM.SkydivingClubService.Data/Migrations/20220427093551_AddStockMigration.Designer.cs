// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SkydivingCRM.SkydivingClubService.Data;

namespace SkydivingCRM.SkydivingClubService.Data.Migrations
{
    [DbContext(typeof(SkydivingClubContext))]
    [Migration("20220427093551_AddStockMigration")]
    partial class AddStockMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SkydivingCRM.SkydivingClubService.Data.Entities.CityEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("SkydivingCRM.SkydivingClubService.Data.Entities.CountryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("SkydivingCRM.SkydivingClubService.Data.Entities.EquipmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssignedSportsmanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 4, 27, 12, 35, 51, 682, DateTimeKind.Local).AddTicks(8508));

                    b.Property<bool>("IsDecommissioned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("StockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StockId");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("SkydivingCRM.SkydivingClubService.Data.Entities.SkydivingClubEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("FoundationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTimeOffset?>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("SkydivingClubs");
                });

            modelBuilder.Entity("SkydivingCRM.SkydivingClubService.Data.Entities.SkydivingGroupEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("FoundationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTimeOffset?>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("SkydivingClubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SkydivingClubId");

                    b.ToTable("SkydivingGroups");
                });

            modelBuilder.Entity("SkydivingCRM.SkydivingClubService.Data.Entities.StockEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkydivingClubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SkydivingClubId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("SkydivingCRM.SkydivingClubService.Data.Entities.CityEntity", b =>
                {
                    b.HasOne("SkydivingCRM.SkydivingClubService.Data.Entities.CountryEntity", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("SkydivingCRM.SkydivingClubService.Data.Entities.EquipmentEntity", b =>
                {
                    b.HasOne("SkydivingCRM.SkydivingClubService.Data.Entities.StockEntity", "Stock")
                        .WithMany("Equipments")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("SkydivingCRM.SkydivingClubService.Data.Entities.SkydivingClubEntity", b =>
                {
                    b.HasOne("SkydivingCRM.SkydivingClubService.Data.Entities.CityEntity", "City")
                        .WithMany("SkydivingClubs")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("SkydivingCRM.SkydivingClubService.Data.Entities.SkydivingGroupEntity", b =>
                {
                    b.HasOne("SkydivingCRM.SkydivingClubService.Data.Entities.SkydivingClubEntity", "SkydivingClub")
                        .WithMany("SkydivingGroups")
                        .HasForeignKey("SkydivingClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkydivingClub");
                });

            modelBuilder.Entity("SkydivingCRM.SkydivingClubService.Data.Entities.StockEntity", b =>
                {
                    b.HasOne("SkydivingCRM.SkydivingClubService.Data.Entities.SkydivingClubEntity", "SkydivingClub")
                        .WithMany("Stocks")
                        .HasForeignKey("SkydivingClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkydivingClub");
                });

            modelBuilder.Entity("SkydivingCRM.SkydivingClubService.Data.Entities.CityEntity", b =>
                {
                    b.Navigation("SkydivingClubs");
                });

            modelBuilder.Entity("SkydivingCRM.SkydivingClubService.Data.Entities.CountryEntity", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("SkydivingCRM.SkydivingClubService.Data.Entities.SkydivingClubEntity", b =>
                {
                    b.Navigation("SkydivingGroups");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("SkydivingCRM.SkydivingClubService.Data.Entities.StockEntity", b =>
                {
                    b.Navigation("Equipments");
                });
#pragma warning restore 612, 618
        }
    }
}
